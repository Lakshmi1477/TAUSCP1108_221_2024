#include <stdio.h>
#include <string.h>

#define MAX_STUDENTS 100
#define MAX_SUBJECTS 10

typedef struct {
    int marks;
    int credit;
    char grade[3];
    int grade_point;
} Subject;

typedef struct {
    char name[50];
    int roll_no;
    int num_subjects;
    Subject subjects[MAX_SUBJECTS];
    float sgpa;
} Student;
void calculateGrade(Subject *subj) {
    int m = subj->marks;
    if (m >= 90) { strcpy(subj->grade, "O"); subj->grade_point = 10; }
    else if (m >= 80) { strcpy(subj->grade, "A+"); subj->grade_point = 9; }
    else if (m >= 70) { strcpy(subj->grade, "A"); subj->grade_point = 8; }
    else if (m >= 60) { strcpy(subj->grade, "B+"); subj->grade_point = 7; }
    else if (m >= 50) { strcpy(subj->grade, "B"); subj->grade_point = 6; }
    else if (m >= 40) { strcpy(subj->grade, "C"); subj->grade_point = 5; }
    else { strcpy(subj->grade, "F"); subj->grade_point = 0; }
}
void inputStudent(Student *s) {
    printf("Enter student name: ");
    scanf(" %[^\n]", s->name);
    printf("Enter roll number: ");
    scanf("%d", &s->roll_no);
    printf("Enter number of subjects (max %d): ", MAX_SUBJECTS);
    scanf("%d", &s->num_subjects);

    int total_credits = 0;
    int weighted_sum = 0;

    for (int i = 0; i < s->num_subjects; i++) {
        printf("Subject %d:\n", i + 1);
        printf("  Marks: ");
        scanf("%d", &s->subjects[i].marks);
        printf("  Credit: ");
        scanf("%d", &s->subjects[i].credit);

        calculateGrade(&s->subjects[i]);

        total_credits += s->subjects[i].credit;
        weighted_sum += s->subjects[i].credit * s->subjects[i].grade_point;
    }

    s->sgpa = (float)weighted_sum / total_credits;
}
void displayStudent(Student s) {
    printf("\nName: %s\n", s.name);
    printf("Roll No: %d\n", s.roll_no);
    printf("Subjects:\n");
    for (int i = 0; i < s.num_subjects; i++) {
        printf("  Subject %d - Marks: %d, Credit: %d, Grade: %s, GP: %d\n",
            i + 1, s.subjects[i].marks, s.subjects[i].credit,
            s.subjects[i].grade, s.subjects[i].grade_point);
    }
    printf("SGPA: %.2f\n", s.sgpa);
}
void saveToFile(Student students[], int count, const char *filename) {
    FILE *f = fopen(filename, "w");
    if (!f) {
        perror("Failed to open file");
        return;
    }

    fprintf(f, "%d\n", count);
    for (int i = 0; i < count; i++) {
        fprintf(f, "%s\n%d\n%d\n", students[i].name, students[i].roll_no, students[i].num_subjects);
        for (int j = 0; j < students[i].num_subjects; j++) {
            fprintf(f, "%d %d %s %d\n",
                students[i].subjects[j].marks,
                students[i].subjects[j].credit,
                students[i].subjects[j].grade,
                students[i].subjects[j].grade_point);
        }
        fprintf(f, "%.2f\n", students[i].sgpa);
    }

    fclose(f);
    printf("Data saved to %s\n", filename);
}
int loadFromFile(Student students[], const char *filename) {
    FILE *f = fopen(filename, "r");
    if (!f) {
        perror("Failed to open file");
        return 0;
    }

    int count;
    fscanf(f, "%d\n", &count);

    for (int i = 0; i < count; i++) {
        fgets(students[i].name, sizeof(students[i].name), f);
        students[i].name[strcspn(students[i].name, "\n")] = 0;
        fscanf(f, "%d\n%d\n", &students[i].roll_no, &students[i].num_subjects);

        for (int j = 0; j < students[i].num_subjects; j++) {
            fscanf(f, "%d %d %s %d\n",
                &students[i].subjects[j].marks,
                &students[i].subjects[j].credit,
                students[i].subjects[j].grade,            &students[i].subjects[j].grade_point);
}
fscanf(f, "%f\n",&students[i].sgpa);
}
fclose(f);
printf("Loaded %d records from %s\n", count, filename);
return count;
}
void searchByRoll(Student students[], int count, int roll) {
for (int i = 0; i < count; i++)
{
if (students[i].roll_no == roll) 
{      
displayStudent(students[i]);
return;
}
}
printf("Student with roll number %d not found.\n", roll);
}
int main() 
{
Student students[MAX_STUDENTS];
int count = 0;
int choice;
const char *filename = "students_sgpa.txt"; 
while (1)
{
printf("\n--- Student Report System ---\n");
printf("1. Enter a new student\n");
printf("2. Display all students\n");
printf("3. Save to file\n");
printf("4. Load from file\n");
printf("5. Search by roll number\n");
printf("6. Exit\n");
printf("Choice: ");
scanf("%d", &choice);
if (choice == 1) 
{    
inputStudent(&students[count]);
count++;
 } 
else if (choice == 2) 
{
for (int i = 0; i < count; i++)             displayStudent(students[i]);} 
else if (choice == 3) 
{
saveToFile(students, count, filename);
} 
else if (choice == 4) 
{
count=loadFromFile(students,filename);
}
else if (choice == 5) 
{
int roll;
printf("Enter roll number: ");
scanf("%d", &roll);           searchByRoll(students,count, roll);
} 
else if (choice == 6) 
{
exit(0);
break;
}
else 
{
printf("Invalid choice\n");
}
}
return 0;
}